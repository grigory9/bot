import telebot
import sqlite3
import random
import time

from telebot import *
from config import *
from button import *
from get_text import *


bot = telebot.TeleBot(token = token, parse_mode = 'html')

@bot.message_handler(commands = ['start'])
def welcome(message):
	if message.chat.type == 'private':
		connect_start = sqlite3.connect('data.db',check_same_thread = False)
		cursor_start = connect_start.cursor()

		cursor_start.execute("""CREATE TABLE IF NOT EXISTS users (
			id INTEGER,
			username TEXT,
			ref TEXT
		)""")
		connect_start.commit()

		cursor_start.execute("""CREATE TABLE IF NOT EXISTS surveys (
			id_survey INTEGER PRIMARY KEY AUTOINCREMENT,
			name TEXT,
			link TEXT
		)""")
		connect_start.commit()

		cursor_start.execute("""CREATE TABLE IF NOT EXISTS op (
			id_channel TEXT
		)""")
		connect_start.commit()

		cursor_start.execute(f"SELECT id FROM users WHERE id = '{message.chat.id}'")
		data = cursor_start.fetchone()
		if data is None:
			us_id = message.chat.id
			us_username = message.from_user.username
			ref = 'None'

			cursor_start.execute(f"INSERT INTO users (id, username, ref) VALUES ('{us_id}', '{us_username}', '{ref}')")
			connect_start.commit()

		full_text = message.text
		se = 'survey'

		if se in full_text:
			#text = message.text
			new_text = full_text.replace('/start survey_', '')
			print(new_text)

			cursor_start.execute(f"SELECT name FROM surveys WHERE id_survey = '{new_text}'")
			name_survey = cursor_start.fetchone()[0]

			cursor_start.execute(f"SELECT link FROM surveys WHERE id_survey = '{new_text}'")
			link_survey = cursor_start.fetchone()[0]

			look = types.InlineKeyboardMarkup()
			webAppTest = types.WebAppInfo(link_survey)
			i1 = types.InlineKeyboardButton(text = '‚ö° –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç', web_app = webAppTest)
			look.add(i1)

			bot.send_message(message.chat.id, f'<b>‚ú® –ß—Ç–æ –±—ã –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç <i>{name_survey}</i> –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É.</b>', reply_markup = look)
		else:
			text = open(hello_path, 'r')
			bot.copy_message(message.chat.id, admin, text.read(), reply_markup = start_menu)


@bot.message_handler(commands = ['admin'])
def adminka(message):
	if message.chat.id == admin:
		bot.reply_to(message, '<b>–ê–¥–º–∏–Ω –º–µ–Ω—é –æ—Ç–∫—Ä—ã—Ç–æ.</b>', reply_markup = admin_menu)


@bot.message_handler(content_types = ['text'])
def content(message):
	if message.chat.type == 'private':
		if message.text == 'üé≤ –†–∞–Ω–¥–æ–º–Ω—ã–π —Ç–µ—Å—Ç':
			connect_game = sqlite3.connect('data.db', check_same_thread = False)
			cursor_game = connect_game.cursor()

			cursor_game.execute("SELECT id_survey FROM surveys ORDER BY RANDOM() LIMIT 1")
			data = cursor_game.fetchone()[0]
			print(data)

			cursor_game.execute(f"SELECT name FROM surveys WHERE id_survey = '{data}'")
			name_survey = cursor_game.fetchone()[0]
			print(name_survey)

			cursor_game.execute(f"SELECT link FROM surveys WHERE id_survey = '{data}'")
			link_survey = cursor_game.fetchone()[0]
			print(link_survey)

			look = types.InlineKeyboardMarkup()
			webAppTest = types.WebAppInfo(link_survey)
			i1 = types.InlineKeyboardButton(text = '‚ö° –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç', web_app = webAppTest)
			look.add(i1)

			bot.reply_to(message, f"üéä <b>–°–ª—É—á–∞–π–Ω—ã–π —Ç–µ—Å—Ç</b>\n<b>‚ùá –ù–∞–∑–≤–∞–Ω–∏–µ</b>: {name_survey}", reply_markup = look, disable_web_page_preview = True)

		#–ê–¥–º–∏–Ω—Å–∫–∞—è —á–∞—Å—Ç—å –±–æ—Ç–∞
		elif message.text == 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞':
			if message.chat.id == admin:
				connect_stat_people = sqlite3.connect('data.db',check_same_thread = False)
				cursor_stat_people = connect_stat_people.cursor()

				cursor_stat_people.execute("SELECT COUNT(*) FROM users")
				count_users = cursor_stat_people.fetchone()[0]

				cursor_stat_people.execute("SELECT COUNT(*) FROM surveys")
				count_anime = cursor_stat_people.fetchone()[0]

				bot.send_message(message.chat.id, f'üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞ @{bot.get_me().username}</b>\n‚óâ –ñ–∏–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {count_users}\n‚óâ –í—Å–µ–≥–æ –æ–ø—Ä–æ—Å–æ–≤ –¥–æ–±–∞–≤–ª–µ–Ω–æ: {count_anime}', reply_markup = d_key)

		elif message.text == '–û–ü üîê':
			if message.chat.id == admin:
				msg = bot.send_message(message.chat.id, '<b>–ß—Ç–æ –¥–µ–ª–∞–µ–º ? ü§î</b>.', reply_markup = opka)
				bot.register_next_step_handler(msg, opka_1)

		elif message.text == 'üÄÑÔ∏è –î–æ–±–∞–≤–∏—Ç—å –æ–ø—Ä–æ—Å':
			if message.chat.id == admin:
				msg = bot.reply_to(message, '<b>–ü–µ—Ä–≤—ã–º –¥–µ–ª–æ–º –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –æ–ø—Ä–æ—Å–∞.</b>', reply_markup = back)
				bot.register_next_step_handler(msg, add_survey)

		elif message.text == '–†–∞—Å—Å—ã–ª–∫–∞ üì®':
			if message.chat.id == admin:
				msg = bot.reply_to(message, '<b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞—Å—Å—ã–ª–∫–∏.</b>', reply_markup = t_r)
				bot.register_next_step_handler(msg, tip_rass)

		elif message.text == '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞':
			if message.chat.id == admin:
				msg = bot.reply_to(message, '<b>–ß—Ç–æ –¥–µ–ª–∞–µ–º ?</b>', reply_markup = setting_menu)
				bot.register_next_step_handler(msg, set_bot)

		elif message.text == 'üö´ –í—ã–π—Ç–∏ –∏–∑ –∞–¥–º–∏–Ω–∫–∏':
			if message.chat.id == admin:
				bot.reply_to(message, '<b>–ê–¥–º–∏–Ω –º–µ–Ω—é —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç–æ.</b>', reply_markup = d_key)
def set_bot(message):
	if message.text == '‚ùå –í—ã—Ö–æ–¥':
		bot.reply_to(message, '<b>–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–∏–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ.</b>', reply_markup = admin_menu)

	elif message.text == '‚ú® –ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ':
		msg = bot.reply_to(message, '<b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ.</b>')
		bot.register_next_step_handler(msg, edit_hello)

def edit_hello(message):
	if message.text == '–û—Ç–º–µ–Ω–∏—Ç—å':
		bot.send_message(message.chat.id, '–û—Ç–º–µ–Ω–µ–Ω–æ üò•', reply_markup = d_key )

	else:
		text = message.message_id
		fa = open(hello_path, 'w', encoding = 'UTF-8')
		fa.write(str(text))
		fa.close()
		bot.send_message(message.chat.id, '–£—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ. ‚úÖ', reply_markup = d_key)

#–†–∞—Å—Å—ã–ª–∫–∞
def tip_rass(message):
	if message.text == '–ü–µ—Ä–µ—Å—Å—ã–ª–∫–∞ | –ü–†–ï–ú –≠–ú–û–î–ó–ò, –û–î–ù–û –§–û–¢–û':
		msg = bot.send_message(message.chat.id, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏', reply_markup = back)
		bot.register_next_step_handler(msg, peressilka)

	elif message.text == '–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ | –ë–ï–ó –ü–†–ï–ú, –û–î–ù–û –§–û–¢–û':
		msg = bot.send_message(message.chat.id, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏', reply_markup = back)
		bot.register_next_step_handler(msg, copy_post)

#–ü–µ—Ä–µ—Å—Å—ã–ª–∫–∞ –ø–æ—Å—Ç–∞
def peressilka(message):
	connect_per = sqlite3.connect('data.db', check_same_thread = False)
	cursor_per = connect_per.cursor()

	if message.text == '–û—Ç–º–µ–Ω–∏—Ç—å':
		bot.send_message(message.chat.id, '–û—Ç–º–µ–Ω–µ–Ω–æ', reply_markup = d_key)

	else:
		cursor_per.execute('SELECT id FROM users')
		result = cursor_per.fetchall()
		i = 0
		b = 0
		bot.send_message(message.chat.id, '<b>–ù–∞—á–∏–Ω–∞—é –¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É, –ø–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É</b> üß∏', parse_mode = 'html' ,reply_markup = d_key)
		try:
			for x in result:
				try:
					i += 1
					bot.forward_message(int(x[0]), message.chat.id, message.message_id)
					#print(f'ID: {x[0]} | –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ.')
				except telebot.apihelper.ApiTelegramException as err:
					i -= 1
					b += 1
					if 'retry after' in str(err).lower():
						retry_after = int(str(err).split('retry after ')[1])
						bot.send_message(admin, f'–£–øc, –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Ç–µ–ª–µ–≥—Ä–∞–º–º–∞. –ñ–¥–µ–º {retry_after} —Å–µ–∫—É–Ω–¥.')
						#print(f'–£–øc, –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Ç–µ–ª–µ–≥—Ä–∞–º–º–∞. –ñ–¥–µ–º {retry_after} —Å–µ–∫—É–Ω–¥.')
						time.sleep(retry_after)
		finally:
			#cursor.close()
			pass
		bot.send_message(admin, f'–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ä–∞—Å—Å—ã–ª–∫–µ\n\n–£—Å–ø–µ—à–Ω–æ: {i}\n–ü—Ä–æ–≤–∞–ª–æ–≤: {b}', reply_markup = d_key)

@bot.message_handler(commands = ['del'])
def delete_qu(message):
    if message.chat.id == admin:
        text = message.text
        finaly_text = text.replace('/del ', '')

        connect_del_qu = sqlite3.connect('data.db', check_same_thread = False)
        cursor_del_qu = connect_del_qu.cursor()
        cursor_del_qu.execute(f"DELETE FROM surveys WHERE id_survey = '{finaly_text}'")
        connect_del_qu.commit()
        bot.reply_to(message, "Succes delete")

#–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞
def copy_post(message):
	connect_copy = sqlite3.connect('data.db', check_same_thread = False)
	cursor_copy = connect_copy.cursor()

	if message.text == '–û—Ç–º–µ–Ω–∏—Ç—å':
		bot.send_message(message.chat.id, '–û—Ç–º–µ–Ω–µ–Ω–æ', reply_markup = d_key)

	else:
		cursor_copy.execute('SELECT id FROM users')
		result = cursor_copy.fetchall()

		chat_id = message.chat.id
		message_id = message.message_id

		i = 0
		b = 0
		bot.send_message(message.chat.id, '<b>–ù–∞—á–∏–Ω–∞—é –¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É, –ø–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É</b> üß∏', parse_mode = 'html' ,reply_markup = d_key)
		try:
			for x in result:
				try:
					i += 1
					original_message = bot.copy_message(int(x[0]), admin,  message_id, reply_markup=message.reply_markup)
					print(f'ID: {x[0]} | –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ.')
				except telebot.apihelper.ApiTelegramException as err:
					i -= 1
					b += 1
					if 'retry after' in str(err).lower():
						retry_after = int(str(err).split('retry after ')[1])
						print(f'–£–øc, –æ–≥—Ä–æ–Ω–∏—á–µ–Ω–∏—è —Ç–µ–ª–µ–≥—Ä–∞–º–º–∞. –ñ–¥–µ–º {retry_after} —Å–µ–∫—É–Ω–¥.')
						time.sleep(retry_after)
		finally:
			pass

		bot.send_message(admin, f'–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ä–∞—Å—Å—ã–ª–∫–µ\n\n–£—Å–ø–µ—à–Ω–æ: {i}\n–ü—Ä–æ–≤–∞–ª–æ–≤: {b}', reply_markup = d_key)


#–î–æ–±–∞–≤–ª–Ω–∏–µ –æ–ø—Ä–æ—Å–æ–≤
def add_survey(message):
	if message.text == '–û—Ç–º–µ–Ω–∏—Ç—å':
		bot.reply_to(message, '<b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–ø—Ä–æ—Å–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ</b>', reply_markup = admin_menu)
	else:
		global name_survey
		name_survey = message.text

		msg = bot.reply_to(message, '<b>–û—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø—Ä–æ—Å.</b>')
		bot.register_next_step_handler(msg, add_survey2)

def add_survey2(message):
    if message.text == '–û—Ç–º–µ–Ω–∏—Ç—å':
        bot.reply_to(message, '<b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–ø—Ä–æ—Å–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ</b>', reply_markup = admin_menu)
    else:
        global link_survey
        link_survey = message.text

        connect_addsurvey = sqlite3.connect('data.db',check_same_thread = False)
        cursor_addsurvey = connect_addsurvey.cursor()
        cursor_addsurvey.execute("SELECT link FROM surveys WHERE link = '{link_survey}'")
        data = cursor_addsurvey.fetchone()[0]
        if data is None:

            #cursor_addsurvey.execute(f"""INSERT INTO table_name (name, link) VALUES ("{name_survey}" , "{link_survey}")""")
            cursor_addsurvey.execute(f"""INSERT INTO surveys(name, link) VALUES ("{name_survey}" , "{link_survey}")""")
            connect_addsurvey.commit()

            bot.send_sticker(message.chat.id, 'CAACAgQAAxkBAAEJqqFkrlPbU6hYLDXodamV9_-4PNnlWQACfQsAAuQkGVDyfE-NPj2zKC8E')

            cursor_addsurvey.execute(f"SELECT id_survey FROM surveys WHERE link = '{link_survey}'")
            data = cursor_addsurvey.fetchone()[0]

            bot.reply_to(message, f'‚ö°Ô∏è <b>–û–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.\n\nId: {data}üîó –°—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø—Ä–æ—Å</b>: https://t.me/{bot.get_me().username}?start=survey_{data}', reply_markup = admin_menu, disable_web_page_preview = True)
        else:
            cursor_addsurvey.execute("SELECT name FROM surveys WHERE link = '{link_survey}'")
            name_repeat = cursor_addsurvey.fetchone()[0]

            bot.reply_to(message, f'–î–∞–Ω–Ω—ã–π –æ–ø—Ä–æ—Å —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω.\n–ù–∞–∑–≤–∞–Ω–∏–µ: {name_repeat}\n–°—Å—ã–ª–∫–∞: {link_survey}')

#–í—Å–µ —á—Ç–æ —Å–≤—è–∑–∞–Ω–æ —Å –û–ü
def opka_1(message):
	if message.text == '‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª':
		msg = bot.send_message(message.chat.id, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –∫–∞–Ω–∞–ª–∞ –Ω–∞—á–∏–Ω–∞—é —Å -100\n\n–ü–æ–ª—É—á–∏—Ç—å ID —Ç—É—Ç: @getmyid_bot', reply_markup = back)
		bot.register_next_step_handler(msg, op_add)

	elif message.text == '‚ûñ –£–±—Ä–∞—Ç—å –∫–∞–Ω–∞–ª':
		msg = bot.send_message(message.chat.id, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –∫–∞–Ω–∞–ª–∞ –Ω–∞—á–∏–Ω–∞—é —Å -100\n\n–ü–æ–ª—É—á–∏—Ç—å ID —Ç—É—Ç: @getmyid_bot', reply_markup = back)
		bot.register_next_step_handler(msg, del_op)

	elif message.text == '‚õè –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç':
		#text = open(op_path, 'r', encoding = 'UTF-8')
		#bot.send_message(message.chat.id, text.read())
		msg = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è.', reply_markup = back)
		bot.register_next_step_handler(msg, op_text)

	elif message.text == 'üóë –£–¥–∞–ª–∏—Ç—å –≤—Å–µ –û–ü':
		cursor_op1.execute("DELETE FROM op")
		connect_op1.commit()

		bot.send_sticker(message.chat.id, 'CAACAgQAAxkBAAEJqqFkrlPbU6hYLDXodamV9_-4PNnlWQACfQsAAuQkGVDyfE-NPj2zKC8E')
		bot.send_message(message.chat.id, '‚úÖ <b>–£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ</b>', reply_markup = d_key)

def del_op(message):
	#try:
	connect_op2 = sqlite3.connect('data.db', check_same_thread = False)
	cursor_op2 = connect_op2.cursor()
	if message.text == '–û—Ç–º–µ–Ω–∏—Ç—å':
		bot.send_message(message.chat.id, '–û—Ç–º–µ–Ω–µ–Ω–æ.\n/start - –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∫–∞–∫ –æ–±—ã—á–Ω–æ\n/admin - –æ—Ç–∫—Ä—ã—Ç—å –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å', reply_markup = d_key)

	else:
		del_id = message.text
		cursor_op2.execute("DELETE FROM op WHERE id = ?", (del_id,))
		connect_op2.commit()
		bot.reply_to(message, "–£—Å–ø–µ—à–Ω–æ", reply_markup = d_key)
	#except:
		##print('–û—à–∏–±–∫–∞')

def op_text(message):
	if message.text == '–û—Ç–º–µ–Ω–∏—Ç—å':
		bot.send_message(message.chat.id, '–û—Ç–º–µ–Ω–µ–Ω–æ.\n/start - –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∫–∞–∫ –æ–±—ã—á–Ω–æ\n/admin - –æ—Ç–∫—Ä—ã—Ç—å –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å', reply_markup = d_key)

	else:
		#–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø
		text = message.message_id
		fa = open(op_path, 'w', encoding = 'UTF-8')
		fa.write(str(text))
		fa.close()
		bot.send_message(message.chat.id, '–£—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ. –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞—á–Ω–∏—Ç–µ –¥–∏–∞–ª–æ–≥ —Å –±–æ—Ç–æ–º /start', reply_markup = d_key)

def op_add(message):
	connect_op3 = sqlite3.connect('data.db', check_same_thread = False)
	cursor_op3 = connect_op3.cursor()

	if message.text == '–û—Ç–º–µ–Ω–∏—Ç—å':
		bot.send_message(message.chat.id, '–û—Ç–º–µ–Ω–µ–Ω–æ.\n/start - –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∫–∞–∫ –æ–±—ã—á–Ω–æ\n/admin - –æ—Ç–∫—Ä—ã—Ç—å –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å', reply_markup = d_key)

	else:
		id_op = message.text
		cursor_op3.execute("""CREATE TABLE IF NOT EXISTS op(
			ch_id TEXT
		)""")
		connect_op3.commit()

		cursor_op3.execute(f"""INSERT INTO op VALUES ("{id_op}")""")
		connect_op3.commit()

		bot.send_sticker(message.chat.id, 'CAACAgQAAxkBAAEJqqFkrlPbU6hYLDXodamV9_-4PNnlWQACfQsAAuQkGVDyfE-NPj2zKC8E')
		bot.send_message(message.chat.id, '‚úÖ <b>–£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ</b>', reply_markup = d_key)


bot.infinity_polling()
